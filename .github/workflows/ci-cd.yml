name: CI/CD Pipeline

# Cuándo se ejecuta el pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Variables de entorno globales
env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Pruebas y análisis de código
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    # Paso 1: Checkout del código
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    # Paso 2: Configurar Node.js
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    # Paso 3: Instalar dependencias
    - name: 📦 Install dependencies
      run: npm ci
      
    # Paso 4: Ejecutar linting (si tienes ESLint configurado)
    - name: 🔍 Run linting
      run: echo "✅ Linting paso - aquí puedes agregar ESLint en el futuro"
      
    # Paso 5: Ejecutar pruebas
    - name: 🧪 Run tests
      run: npm test
      
    # Paso 6: Generar reporte de cobertura
    - name: 📊 Generate coverage report
      run: npm run test:coverage

  # Job 2: Construir imagen Docker
  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    needs: test # Solo ejecutar si las pruebas pasan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    # Configurar Docker Buildx
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Login a Docker Hub (solo para push a main)
    - name: 🔐 Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # Construir imagen Docker
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/todo-api:latest
          ${{ secrets.DOCKER_USERNAME }}/todo-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Notificaciones y resumen
  notify:
    name: 📢 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: 📧 Pipeline Results
      run: |
        echo "=== RESUMEN DEL PIPELINE ==="
        echo ""
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ TESTS: Todas las pruebas pasaron correctamente"
        else
          echo "❌ TESTS: Falló en las pruebas - revisar código"
        fi
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ BUILD: Imagen Docker creada exitosamente"
        else
          echo "❌ BUILD: Error al construir imagen Docker"
        fi
        
        echo ""
        echo "🚂 DEPLOY: Railway maneja el despliegue automáticamente"
        echo "🌐 URL: https://todo-api-cicd-production.up.railway.app"
        echo ""
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "🎉 PIPELINE COMPLETADO EXITOSAMENTE"
        else
          echo "🚨 PIPELINE FALLÓ - Revisar logs arriba"
        fi